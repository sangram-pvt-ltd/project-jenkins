pipeline {
    agent any
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Build and Push Docker Image - Tomcat') {
            agent any
            environment {
                AWS_REGION = 'ap-south-1'
                ECR_REPOSITORY_NAME = '433796583082.dkr.ecr.ap-south-1.amazonaws.com/jenkinsproject'
                DOCKER_IMAGE_NAME = "jenkinsproject"
                DOCKERFILE_PATH = "java-tomcat/" // e.g., "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
                MY_Image = 'tomcat'
            }
            steps {
                script {
                    // Build the Docker image
                    sh "docker build -t $DOCKER_IMAGE_NAME $DOCKERFILE_PATH"
                    // Log in to AWS ECR
                    sh "aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPOSITORY_NAME"
                    // Tag the Docker image with the ECR repository URI
                    def ecrImageURI = "$ECR_REPOSITORY_NAME:${MY_Image}-${BUILD_NUMBER}"
                    sh "docker tag $DOCKER_IMAGE_NAME $ecrImageURI"
                    // Push the image to ECR
                    sh "docker push $ecrImageURI"
                    sh 'docker rmi -f $(docker images -q) '
                }
            }
        }
        stage('Build and Push Docker Image - reactappfoo') {
            agent any
            environment {
                AWS_REGION = 'ap-south-1'
                ECR_REPOSITORY_NAME = '433796583082.dkr.ecr.ap-south-1.amazonaws.com/jenkinsproject'
                DOCKER_IMAGE_NAME = "jenkinsproject"
                DOCKERFILE_PATH = "argo-learning-foo-app/" // e.g., "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
                MY_Image = 'reactfoo'
            }
            steps {
                script {
                    // Build the Docker image
                    sh "docker build -t $DOCKER_IMAGE_NAME $DOCKERFILE_PATH"
                    // Log in to AWS ECR
                    sh "aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPOSITORY_NAME"
                    // Tag the Docker image with the ECR repository URI
                    def ecrImageURI = "$ECR_REPOSITORY_NAME:${MY_Image}-${BUILD_NUMBER}"
                    sh "docker tag $DOCKER_IMAGE_NAME $ecrImageURI"
                    // Push the image to ECR
                    sh "docker push $ecrImageURI"
                    sh 'docker rmi -f $(docker images -q) '
                }
            }
        }
        stage('Build and Push Docker Image - reactappbar') {
            agent any
            environment {
                AWS_REGION = 'ap-south-1'
                ECR_REPOSITORY_NAME = '433796583082.dkr.ecr.ap-south-1.amazonaws.com/jenkinsproject'
                DOCKER_IMAGE_NAME = "jenkinsproject"
                DOCKERFILE_PATH = "argo-learning-bar-app/" // e.g., "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
                MY_Image = 'reactbar'
            }
            steps {
                script {
                    // Build the Docker image
                    sh "docker build -t $DOCKER_IMAGE_NAME $DOCKERFILE_PATH"
                    // Log in to AWS ECR
                    sh "aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPOSITORY_NAME"
                    // Tag the Docker image with the ECR repository URI
                    def ecrImageURI = "$ECR_REPOSITORY_NAME:${MY_Image}-${BUILD_NUMBER}"
                    sh "docker tag $DOCKER_IMAGE_NAME $ecrImageURI"
                    // Push the image to ECR
                    sh "docker push $ecrImageURI"
                    sh 'docker rmi -f $(docker images -q) '
                }
            }
        }
        stage('Build and Push Docker Image - React') {
            agent any
            environment {
                AWS_REGION = 'ap-south-1'
                ECR_REPOSITORY_NAME = '433796583082.dkr.ecr.ap-south-1.amazonaws.com/jenkinsproject'
                DOCKER_IMAGE_NAME = "jenkinsproject"
                DOCKERFILE_PATH = "reactapp/" // e.g., "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
                MY_Image = 'react'
            }
            steps {
                script {
                    // Build the Docker image
                    sh "docker build -t $DOCKER_IMAGE_NAME $DOCKERFILE_PATH"
                    // Log in to AWS ECR
                    sh "aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPOSITORY_NAME"
                    // Tag the Docker image with the ECR repository URI
                    def ecrImageURI = "$ECR_REPOSITORY_NAME:${MY_Image}-${BUILD_NUMBER}"
                    sh "docker tag $DOCKER_IMAGE_NAME $ecrImageURI"
                    // Push the image to ECR
                    sh "docker push $ecrImageURI"
                    sh 'docker rmi -f $(docker images -q) '
                }
            }
        }
        stage('Update Deployment File') {
            agent {
                label 'slave1'  // Run this stage on agents with the specified label
            }
        environment {
            GIT_REPO_NAME = "argocddeploymentrepo"
            GIT_USER_NAME = "Vinesh02"
        }
        steps {
            withCredentials([string(credentialsId: 'GITHUB_TOKEN', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    git config user.email "vineshchaturvedi20@gmail.com"
                    git config user.name "Vinesh Chaturvedi"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" ./deployment.yaml
                    git add deployment.yaml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
        }
    }
    }
}

